[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py","pyi","py3","pyw",".pythonstartup",".pythonrc"]
shebangs = ["python"]
roots = [".", "pyproject.toml", "pyrightconfig.json"]
comment-token = "#"
language-servers = ["basedpyright", "ruff"]
indent = { tab-width = 4, unit = "    " }
auto-format = true

[language.formatter]
command = "sh"
args = ["-c", "ruff check --fix - | ruff format -"]

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]

[language-server.pyright.config]
reportMissingTypeStubs = false

[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config]
settings = {args = []}

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

[language-server.basedpyright.config]
basedpyright.analysis.diagnosticMode = "openFilesOnly"
basedpyright.analysis.typeCheckingMode = "standard"


[[language]]
name = "robot"
scope = "source.robot"
injection-regex = "robot"
file-types = ["robot", "resource"]
comment-token = "#"
indent = { tab-width = 4, unit = " " }
language-servers = [ "robotcode" ]

[language-server.robotcode]
command = "robotcode"
args = ["language-server"]

[[language]]
name = "markdown"

[language.formatter]
name = "markdown"
command = "bash"
args = ["-c", "pandoc -t gfm --wrap=auto --columns=100"]


[[language]]
name = "scheme"
language-servers = ["scheme-language-server"]

[language-server.scheme-language-server]
command = "steel-language-server"

[language.formatter]
name = "scheme"
command = "schemat"
